name: 'Generate SDK'
description: 'Generate SDK for a given API'
inputs:
  spec-link: 
    description: 'Link to the spec file.'
    required: true
  package-name:
    description: 'Name of the python package.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Logging head_ref and ref_name
      shell: bash
      run: |
        echo "head_ref = ${{ github.head_ref }}"
        echo "ref_name = ${{ github.ref_name }}"
    - name: Install node
      uses: actions/setup-node@v2
    - name: Install openapi-generator-cli
      shell: bash
      run: npm install -g @openapitools/openapi-generator-cli
      # First part of the cleanup - makes sure obsolete files get deleted.
      # Everything else will be re-generated.
    - name: Cleanup existing files
      shell: bash
      run: |
        echo "Moving version.py file out..."
        mv ./${{ inputs.package-name }}/${{ inputs.package-name }}/version.py ./version.py

        echo "Cleaning up ${{ inputs.package-name }}..."
        rm -rf ./${{ inputs.package-name }}/*

        echo "Re-creating folder inside ${{ inputs.package-name }}..."
        mkdir ./${{ inputs.package-name }}/${{ inputs.package-name }}

        echo "Moving version.py file back in..."
        mv ./version.py ./${{ inputs.package-name }}/${{ inputs.package-name }}/version.py
    - name: Download spec files
      shell: bash
      run: wget ${{ inputs.spec-link }} -O ./${{ inputs.package-name }}/${{ inputs.package-name }}.spec.yaml
    - name: Generate API
      shell: bash
      run: |
        version=$(./extract-version.sh ./${{ inputs.package-name }}/${{ inputs.package-name }}/version.py)

        openapi-generator-cli generate \
        -i ${{ inputs.spec-link }} \
        -c openapi-generator-config.yaml \
        -o=${{ inputs.package-name }} \
        --additional-properties packageName=${{ inputs.package-name }} \
        --additional-properties packageVersion=$version \
        --additional-properties disallowAdditionalPropertiesIfNotPresent=false
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.package-name }}
        path: ${{ inputs.package-name }}