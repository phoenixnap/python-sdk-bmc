# coding: utf-8

"""
    Invoicing API

    List, fetch and pay invoices with the Invoicing API. 

    The version of the OpenAPI document: 1.0
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Invoice(BaseModel):
    """
    Invoice
    """ # noqa: E501
    id: StrictStr = Field(description="The unique resource identifier of the Invoice.")
    number: StrictStr = Field(description="A user-friendly reference number assigned to the invoice.")
    currency: StrictStr = Field(description="The currency of the invoice. Currently, this field should be set to `EUR` or `USD`.")
    amount: Union[StrictFloat, StrictInt] = Field(description="The invoice amount.")
    outstanding_amount: Union[StrictFloat, StrictInt] = Field(description="The invoice outstanding amount.", alias="outstandingAmount")
    status: StrictStr = Field(description="The status of the invoice. Currently, this field should be set to `PAID`, `OVERDUE`, `PROCESSING_PAYMENT`, or `UNPAID`.")
    sent_on: datetime = Field(description="Date and time when the invoice was sent.", alias="sentOn")
    due_date: datetime = Field(description="Date and time when the invoice payment is due.", alias="dueDate")
    __properties: ClassVar[List[str]] = ["id", "number", "currency", "amount", "outstandingAmount", "status", "sentOn", "dueDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "currency": obj.get("currency"),
            "amount": obj.get("amount"),
            "outstandingAmount": obj.get("outstandingAmount"),
            "status": obj.get("status"),
            "sentOn": obj.get("sentOn"),
            "dueDate": obj.get("dueDate")
        })
        return _obj


