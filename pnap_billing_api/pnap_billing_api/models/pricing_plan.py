# coding: utf-8

"""
    Billing API

    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from pnap_billing_api.models.applicable_discounts import ApplicableDiscounts
from pnap_billing_api.models.price_unit_enum import PriceUnitEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PricingPlan(BaseModel):
    """
    Pricing plan details.
    """ # noqa: E501
    sku: StrictStr = Field(description="The SKU identifying this pricing plan.")
    sku_description: Optional[StrictStr] = Field(default=None, description="Description of this pricing plan.", alias="skuDescription")
    location: StrictStr = Field(description="The code identifying the location.")
    pricing_model: StrictStr = Field(description="The pricing model.", alias="pricingModel")
    price: Union[StrictFloat, StrictInt] = Field(description="The price per unit.")
    price_unit: PriceUnitEnum = Field(alias="priceUnit")
    applicable_discounts: Optional[ApplicableDiscounts] = Field(default=None, alias="applicableDiscounts")
    correlated_product_code: Optional[StrictStr] = Field(default=None, description="Product code of the product this product is correlated with", alias="correlatedProductCode")
    package_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Package size per month.", alias="packageQuantity")
    package_unit: Optional[StrictStr] = Field(default=None, description="Package size unit.", alias="packageUnit")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["sku", "skuDescription", "location", "pricingModel", "price", "priceUnit", "applicableDiscounts", "correlatedProductCode", "packageQuantity", "packageUnit"]

    @field_validator('location')
    def location_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PHX', 'ASH', 'NLD', 'SGP', 'CHI', 'SEA', 'AUS', 'GLOBAL'):
            raise ValueError("must be one of enum values ('PHX', 'ASH', 'NLD', 'SGP', 'CHI', 'SEA', 'AUS', 'GLOBAL')")
        return value

    @field_validator('pricing_model')
    def pricing_model_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('HOURLY', 'METERED', 'ONE_MONTH_RESERVATION', 'TWELVE_MONTHS_RESERVATION', 'TWENTY_FOUR_MONTHS_RESERVATION', 'THIRTY_SIX_MONTHS_RESERVATION', 'MONTHLY_PACKAGE', 'FREE_TIER'):
            raise ValueError("must be one of enum values ('HOURLY', 'METERED', 'ONE_MONTH_RESERVATION', 'TWELVE_MONTHS_RESERVATION', 'TWENTY_FOUR_MONTHS_RESERVATION', 'THIRTY_SIX_MONTHS_RESERVATION', 'MONTHLY_PACKAGE', 'FREE_TIER')")
        return value

    @field_validator('package_unit')
    def package_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GB', 'TB'):
            raise ValueError("must be one of enum values ('GB', 'TB')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PricingPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applicable_discounts
        if self.applicable_discounts:
            _dict['applicableDiscounts'] = self.applicable_discounts.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PricingPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sku": obj.get("sku"),
            "skuDescription": obj.get("skuDescription"),
            "location": obj.get("location"),
            "pricingModel": obj.get("pricingModel"),
            "price": obj.get("price"),
            "priceUnit": obj.get("priceUnit"),
            "applicableDiscounts": ApplicableDiscounts.from_dict(obj.get("applicableDiscounts")) if obj.get("applicableDiscounts") is not None else None,
            "correlatedProductCode": obj.get("correlatedProductCode"),
            "packageQuantity": obj.get("packageQuantity"),
            "packageUnit": obj.get("packageUnit")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


