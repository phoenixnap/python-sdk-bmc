# coding: utf-8

"""
    Billing API

    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from pnap_billing_api.models.bandwidth_details import BandwidthDetails
from pnap_billing_api.models.discount_details import DiscountDetails
from pnap_billing_api.models.location_enum import LocationEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BandwidthRecord(BaseModel):
    """
    BandwidthRecord
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the rated usage record.")
    product_category: StrictStr = Field(description="The category of the product associated with this usage record.", alias="productCategory")
    product_code: StrictStr = Field(description="The code identifying the product associated to this usage record.", alias="productCode")
    location: LocationEnum
    year_month: Optional[StrictStr] = Field(default=None, description="Year and month of the usage record.", alias="yearMonth")
    start_date_time: datetime = Field(description="The point in time (in UTC) when usage has started.", alias="startDateTime")
    end_date_time: datetime = Field(description="The point in time (in UTC) until usage has been rated.", alias="endDateTime")
    cost: StrictInt = Field(description="The rated usage in cents.")
    cost_before_discount: Optional[StrictInt] = Field(default=None, description="The cost in cents before discount.", alias="costBeforeDiscount")
    cost_description: Optional[StrictStr] = Field(default=None, description="The rated usage cost description.", alias="costDescription")
    price_model: StrictStr = Field(description="The price model applied to this usage record.", alias="priceModel")
    unit_price: Union[StrictFloat, StrictInt] = Field(description="The unit price.", alias="unitPrice")
    unit_price_description: StrictStr = Field(description="User friendly description of the unit price.", alias="unitPriceDescription")
    quantity: Union[StrictFloat, StrictInt] = Field(description="The number of units being charged.")
    active: StrictBool = Field(description="A flag indicating whether the rated usage record is still active.")
    usage_session_id: StrictStr = Field(description="The usage session ID is used to correlate rated usage records across periods of time. For example, a server used for over a month will generate multiple rated usage records. The entire usage session cost can be computed by aggregating the records having the same usage session ID. It is usual to have one rated usage record per month or invoice.", alias="usageSessionId")
    correlation_id: StrictStr = Field(description="Holds usage record id", alias="correlationId")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation id associated with this rated usage record.", alias="reservationId")
    discount_details: Optional[DiscountDetails] = Field(default=None, alias="discountDetails")
    metadata: BandwidthDetails
    __properties: ClassVar[List[str]] = ["id", "productCategory", "productCode", "location", "yearMonth", "startDateTime", "endDateTime", "cost", "costBeforeDiscount", "costDescription", "priceModel", "unitPrice", "unitPriceDescription", "quantity", "active", "usageSessionId", "correlationId", "reservationId", "discountDetails", "metadata"]

    @field_validator('product_category')
    def product_category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('bmc-server', 'bandwidth', 'operating-system', 'public-ip', 'storage'):
            raise ValueError("must be one of enum values ('bmc-server', 'bandwidth', 'operating-system', 'public-ip', 'storage')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BandwidthRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of discount_details
        if self.discount_details:
            _dict['discountDetails'] = self.discount_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BandwidthRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "productCategory": obj.get("productCategory"),
            "productCode": obj.get("productCode"),
            "location": obj.get("location"),
            "yearMonth": obj.get("yearMonth"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "cost": obj.get("cost"),
            "costBeforeDiscount": obj.get("costBeforeDiscount"),
            "costDescription": obj.get("costDescription"),
            "priceModel": obj.get("priceModel"),
            "unitPrice": obj.get("unitPrice"),
            "unitPriceDescription": obj.get("unitPriceDescription"),
            "quantity": obj.get("quantity"),
            "active": obj.get("active"),
            "usageSessionId": obj.get("usageSessionId"),
            "correlationId": obj.get("correlationId"),
            "reservationId": obj.get("reservationId"),
            "discountDetails": DiscountDetails.from_dict(obj.get("discountDetails")) if obj.get("discountDetails") is not None else None,
            "metadata": BandwidthDetails.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None
        })
        return _obj


