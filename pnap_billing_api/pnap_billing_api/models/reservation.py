# coding: utf-8

"""
    Billing API

    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from pnap_billing_api.models.location_enum import LocationEnum
from pnap_billing_api.models.price_unit_enum import PriceUnitEnum
from pnap_billing_api.models.reservation_invoicing_model_enum import ReservationInvoicingModelEnum
from pnap_billing_api.models.reservation_model_enum import ReservationModelEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Reservation(BaseModel):
    """
    Reservation details
    """ # noqa: E501
    id: StrictStr = Field(description="The reservation identifier.")
    product_code: StrictStr = Field(description="The code identifying the product. This code has significant across all locations.", alias="productCode")
    product_category: StrictStr = Field(description="The product category.", alias="productCategory")
    location: LocationEnum
    reservation_model: ReservationModelEnum = Field(alias="reservationModel")
    initial_invoice_model: Optional[ReservationInvoicingModelEnum] = Field(default=None, alias="initialInvoiceModel")
    start_date_time: datetime = Field(description="The point in time (in UTC) when the reservation starts.", alias="startDateTime")
    end_date_time: Optional[datetime] = Field(default=None, description="The point in time (in UTC) when the reservation end.", alias="endDateTime")
    last_renewal_date_time: Optional[datetime] = Field(default=None, description="The point in time (in UTC) when the reservation was renewed last.", alias="lastRenewalDateTime")
    next_renewal_date_time: Optional[datetime] = Field(default=None, description="The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.", alias="nextRenewalDateTime")
    auto_renew: StrictBool = Field(description="A flag indicating whether the reservation will auto-renew (default is true).", alias="autoRenew")
    sku: StrictStr = Field(description="The sku that will be applied to this reservation. It is useful to find out the price by querying the /product endpoint.")
    price: Union[StrictFloat, StrictInt] = Field(description="Reservation price.")
    price_unit: PriceUnitEnum = Field(alias="priceUnit")
    assigned_resource_id: Optional[StrictStr] = Field(default=None, description="The resource ID currently being assigned to Reservation.", alias="assignedResourceId")
    next_billing_date: Optional[date] = Field(default=None, description="Next billing date for Reservation.", alias="nextBillingDate")
    __properties: ClassVar[List[str]] = ["id", "productCode", "productCategory", "location", "reservationModel", "initialInvoiceModel", "startDateTime", "endDateTime", "lastRenewalDateTime", "nextRenewalDateTime", "autoRenew", "sku", "price", "priceUnit", "assignedResourceId", "nextBillingDate"]

    @field_validator('product_category')
    def product_category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('server', 'bandwidth', 'operating-system'):
            raise ValueError("must be one of enum values ('server', 'bandwidth', 'operating-system')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Reservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Reservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "productCode": obj.get("productCode"),
            "productCategory": obj.get("productCategory"),
            "location": obj.get("location"),
            "reservationModel": obj.get("reservationModel"),
            "initialInvoiceModel": obj.get("initialInvoiceModel"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "lastRenewalDateTime": obj.get("lastRenewalDateTime"),
            "nextRenewalDateTime": obj.get("nextRenewalDateTime"),
            "autoRenew": obj.get("autoRenew"),
            "sku": obj.get("sku"),
            "price": obj.get("price"),
            "priceUnit": obj.get("priceUnit"),
            "assignedResourceId": obj.get("assignedResourceId"),
            "nextBillingDate": obj.get("nextBillingDate")
        })
        return _obj


