# coding: utf-8

"""
    Billing API

    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from pnap_billing_api.models.bandwidth_record import BandwidthRecord
from pnap_billing_api.models.operating_system_record import OperatingSystemRecord
from pnap_billing_api.models.public_subnet_record import PublicSubnetRecord
from pnap_billing_api.models.server_record import ServerRecord
from pnap_billing_api.models.storage_record import StorageRecord
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

RATEDUSAGEGET200RESPONSEINNER_ONE_OF_SCHEMAS = ["BandwidthRecord", "OperatingSystemRecord", "PublicSubnetRecord", "ServerRecord", "StorageRecord"]

class RatedUsageGet200ResponseInner(BaseModel):
    """
    RatedUsageGet200ResponseInner
    """
    # data type: ServerRecord
    oneof_schema_1_validator: Optional[ServerRecord] = None
    # data type: BandwidthRecord
    oneof_schema_2_validator: Optional[BandwidthRecord] = None
    # data type: OperatingSystemRecord
    oneof_schema_3_validator: Optional[OperatingSystemRecord] = None
    # data type: PublicSubnetRecord
    oneof_schema_4_validator: Optional[PublicSubnetRecord] = None
    # data type: StorageRecord
    oneof_schema_5_validator: Optional[StorageRecord] = None
    actual_instance: Optional[Union[BandwidthRecord, OperatingSystemRecord, PublicSubnetRecord, ServerRecord, StorageRecord]] = None
    one_of_schemas: List[str] = Literal["BandwidthRecord", "OperatingSystemRecord", "PublicSubnetRecord", "ServerRecord", "StorageRecord"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RatedUsageGet200ResponseInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: ServerRecord
        if not isinstance(v, ServerRecord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ServerRecord`")
        else:
            match += 1
        # validate data type: BandwidthRecord
        if not isinstance(v, BandwidthRecord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BandwidthRecord`")
        else:
            match += 1
        # validate data type: OperatingSystemRecord
        if not isinstance(v, OperatingSystemRecord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OperatingSystemRecord`")
        else:
            match += 1
        # validate data type: PublicSubnetRecord
        if not isinstance(v, PublicSubnetRecord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PublicSubnetRecord`")
        else:
            match += 1
        # validate data type: StorageRecord
        if not isinstance(v, StorageRecord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StorageRecord`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RatedUsageGet200ResponseInner with oneOf schemas: BandwidthRecord, OperatingSystemRecord, PublicSubnetRecord, ServerRecord, StorageRecord. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RatedUsageGet200ResponseInner with oneOf schemas: BandwidthRecord, OperatingSystemRecord, PublicSubnetRecord, ServerRecord, StorageRecord. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ServerRecord
        try:
            instance.actual_instance = ServerRecord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BandwidthRecord
        try:
            instance.actual_instance = BandwidthRecord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OperatingSystemRecord
        try:
            instance.actual_instance = OperatingSystemRecord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PublicSubnetRecord
        try:
            instance.actual_instance = PublicSubnetRecord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StorageRecord
        try:
            instance.actual_instance = StorageRecord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RatedUsageGet200ResponseInner with oneOf schemas: BandwidthRecord, OperatingSystemRecord, PublicSubnetRecord, ServerRecord, StorageRecord. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RatedUsageGet200ResponseInner with oneOf schemas: BandwidthRecord, OperatingSystemRecord, PublicSubnetRecord, ServerRecord, StorageRecord. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


