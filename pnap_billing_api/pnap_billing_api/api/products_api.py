# coding: utf-8

"""
    Billing API

    Automate your infrastructure billing with the Bare Metal Cloud Billing API. Reserve your server instances to ensure guaranteed resource availability for 12, 24, and 36 months. Retrieve your serverâ€™s rated usage for a given period and enable or disable auto-renewals.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/phoenixnap-bare-metal-cloud-billing-models' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/billing/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr, field_validator

from typing import List, Optional, Union

from pnap_billing_api.models.location_enum import LocationEnum
from pnap_billing_api.models.product_availability import ProductAvailability
from pnap_billing_api.models.products_get200_response_inner import ProductsGet200ResponseInner

from pnap_billing_api.api_client import ApiClient
from pnap_billing_api.api_response import ApiResponse
from pnap_billing_api.rest import RESTResponseType


class ProductsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def product_availability_get(
        self,
        product_category: Annotated[Optional[List[StrictStr]], Field(description="Product category. Currently only SERVER category is supported.")] = None,
        product_code: Optional[List[StrictStr]] = None,
        show_only_min_quantity_available: Annotated[Optional[StrictBool], Field(description="Show only locations where product with requested quantity is available or all locations where product is offered.")] = None,
        location: Optional[List[LocationEnum]] = None,
        solution: Optional[List[StrictStr]] = None,
        min_quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProductAvailability]:
        """List all Product availabilities.

        Retrieves the list of product availability details.

        :param product_category: Product category. Currently only SERVER category is supported.
        :type product_category: List[str]
        :param product_code:
        :type product_code: List[str]
        :param show_only_min_quantity_available: Show only locations where product with requested quantity is available or all locations where product is offered.
        :type show_only_min_quantity_available: bool
        :param location:
        :type location: List[LocationEnum]
        :param solution:
        :type solution: List[str]
        :param min_quantity: Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.
        :type min_quantity: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_availability_get_serialize(
            product_category=product_category,
            product_code=product_code,
            show_only_min_quantity_available=show_only_min_quantity_available,
            location=location,
            solution=solution,
            min_quantity=min_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductAvailability]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_availability_get_with_http_info(
        self,
        product_category: Annotated[Optional[List[StrictStr]], Field(description="Product category. Currently only SERVER category is supported.")] = None,
        product_code: Optional[List[StrictStr]] = None,
        show_only_min_quantity_available: Annotated[Optional[StrictBool], Field(description="Show only locations where product with requested quantity is available or all locations where product is offered.")] = None,
        location: Optional[List[LocationEnum]] = None,
        solution: Optional[List[StrictStr]] = None,
        min_quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProductAvailability]]:
        """List all Product availabilities.

        Retrieves the list of product availability details.

        :param product_category: Product category. Currently only SERVER category is supported.
        :type product_category: List[str]
        :param product_code:
        :type product_code: List[str]
        :param show_only_min_quantity_available: Show only locations where product with requested quantity is available or all locations where product is offered.
        :type show_only_min_quantity_available: bool
        :param location:
        :type location: List[LocationEnum]
        :param solution:
        :type solution: List[str]
        :param min_quantity: Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.
        :type min_quantity: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_availability_get_serialize(
            product_category=product_category,
            product_code=product_code,
            show_only_min_quantity_available=show_only_min_quantity_available,
            location=location,
            solution=solution,
            min_quantity=min_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductAvailability]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_availability_get_without_preload_content(
        self,
        product_category: Annotated[Optional[List[StrictStr]], Field(description="Product category. Currently only SERVER category is supported.")] = None,
        product_code: Optional[List[StrictStr]] = None,
        show_only_min_quantity_available: Annotated[Optional[StrictBool], Field(description="Show only locations where product with requested quantity is available or all locations where product is offered.")] = None,
        location: Optional[List[LocationEnum]] = None,
        solution: Optional[List[StrictStr]] = None,
        min_quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all Product availabilities.

        Retrieves the list of product availability details.

        :param product_category: Product category. Currently only SERVER category is supported.
        :type product_category: List[str]
        :param product_code:
        :type product_code: List[str]
        :param show_only_min_quantity_available: Show only locations where product with requested quantity is available or all locations where product is offered.
        :type show_only_min_quantity_available: bool
        :param location:
        :type location: List[LocationEnum]
        :param solution:
        :type solution: List[str]
        :param min_quantity: Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.
        :type min_quantity: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_availability_get_serialize(
            product_category=product_category,
            product_code=product_code,
            show_only_min_quantity_available=show_only_min_quantity_available,
            location=location,
            solution=solution,
            min_quantity=min_quantity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductAvailability]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_availability_get_serialize(
        self,
        product_category,
        product_code,
        show_only_min_quantity_available,
        location,
        solution,
        min_quantity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'productCategory': 'multi',
            'productCode': 'multi',
            'location': 'multi',
            'solution': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_category is not None:
            
            _query_params.append(('productCategory', product_category))
            
        if product_code is not None:
            
            _query_params.append(('productCode', product_code))
            
        if show_only_min_quantity_available is not None:
            
            _query_params.append(('showOnlyMinQuantityAvailable', show_only_min_quantity_available))
            
        if location is not None:
            
            _query_params.append(('location', location))
            
        if solution is not None:
            
            _query_params.append(('solution', solution))
            
        if min_quantity is not None:
            
            _query_params.append(('minQuantity', min_quantity))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product-availability',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def products_get(
        self,
        product_code: Optional[StrictStr] = None,
        product_category: Optional[StrictStr] = None,
        sku_code: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ProductsGet200ResponseInner]:
        """List all Products.

        Retrieves all Products.

        :param product_code:
        :type product_code: str
        :param product_category:
        :type product_category: str
        :param sku_code:
        :type sku_code: str
        :param location:
        :type location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._products_get_serialize(
            product_code=product_code,
            product_category=product_category,
            sku_code=sku_code,
            location=location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductsGet200ResponseInner]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def products_get_with_http_info(
        self,
        product_code: Optional[StrictStr] = None,
        product_category: Optional[StrictStr] = None,
        sku_code: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ProductsGet200ResponseInner]]:
        """List all Products.

        Retrieves all Products.

        :param product_code:
        :type product_code: str
        :param product_category:
        :type product_category: str
        :param sku_code:
        :type sku_code: str
        :param location:
        :type location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._products_get_serialize(
            product_code=product_code,
            product_category=product_category,
            sku_code=sku_code,
            location=location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductsGet200ResponseInner]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def products_get_without_preload_content(
        self,
        product_code: Optional[StrictStr] = None,
        product_category: Optional[StrictStr] = None,
        sku_code: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all Products.

        Retrieves all Products.

        :param product_code:
        :type product_code: str
        :param product_category:
        :type product_category: str
        :param sku_code:
        :type sku_code: str
        :param location:
        :type location: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._products_get_serialize(
            product_code=product_code,
            product_category=product_category,
            sku_code=sku_code,
            location=location,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ProductsGet200ResponseInner]",
            '400': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _products_get_serialize(
        self,
        product_code,
        product_category,
        sku_code,
        location,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_code is not None:
            
            _query_params.append(('productCode', product_code))
            
        if product_category is not None:
            
            _query_params.append(('productCategory', product_category))
            
        if sku_code is not None:
            
            _query_params.append(('skuCode', sku_code))
            
        if location is not None:
            
            _query_params.append(('location', location))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/products',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


