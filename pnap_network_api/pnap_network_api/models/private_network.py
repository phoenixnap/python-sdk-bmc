# coding: utf-8

"""
    Networks API

    Create, list, edit and delete public/private networks with the Network API. Use public networks to place multiple  servers on the same network or VLAN. Assign new servers with IP addresses from the same CIDR range. Use private  networks to avoid unnecessary egress data charges. Model your networks according to your business needs.<br> <br> <span class='pnap-api-knowledge-base-link'> Helpful knowledge base articles are available for  <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#multi-private-backend-network-api' target='_blank'>multi-private backend networks</a> and <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#ftoc-heading-15' target='_blank'>public networks</a>. </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/networks/v1/)</b> 

    The version of the OpenAPI document: 1.0
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from pnap_network_api.models.network_membership import NetworkMembership
from pnap_network_api.models.private_network_server import PrivateNetworkServer
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PrivateNetwork(BaseModel):
    """
    Private Network details.
    """ # noqa: E501
    id: StrictStr = Field(description="The private network identifier.")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="The friendly name of this private network.")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="The description of this private network.")
    vlan_id: StrictInt = Field(description="The VLAN of this private network.", alias="vlanId")
    type: StrictStr = Field(description="The type of the private network.")
    location: StrictStr = Field(description="The location of this private network.")
    location_default: StrictBool = Field(description="Identifies network as the default private network for the specified location.", alias="locationDefault")
    cidr: Optional[StrictStr] = Field(default=None, description="IP range associated with this private network in CIDR notation.")
    servers: List[PrivateNetworkServer]
    memberships: List[NetworkMembership] = Field(description="A list of resources that are members of this private network.")
    status: StrictStr = Field(description="The status of the private network. Can have one of the following values: `BUSY`, `READY`, `DELETING` or `ERROR`.")
    created_on: datetime = Field(description="Date and time when this private network was created.", alias="createdOn")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "description", "vlanId", "type", "location", "locationDefault", "cidr", "servers", "memberships", "status", "createdOn"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PrivateNetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in servers (list)
        _items = []
        if self.servers:
            for _item in self.servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item in self.memberships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['memberships'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PrivateNetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "vlanId": obj.get("vlanId"),
            "type": obj.get("type"),
            "location": obj.get("location"),
            "locationDefault": obj.get("locationDefault"),
            "cidr": obj.get("cidr"),
            "servers": [PrivateNetworkServer.from_dict(_item) for _item in obj.get("servers")] if obj.get("servers") is not None else None,
            "memberships": [NetworkMembership.from_dict(_item) for _item in obj.get("memberships")] if obj.get("memberships") is not None else None,
            "status": obj.get("status"),
            "createdOn": obj.get("createdOn")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


