# coding: utf-8

"""
    Bare Metal Cloud API

    Create, power off, power on, reset, reboot, or shut down your server with the Bare Metal Cloud API.  Deprovision servers, get or edit SSH key details, assign public IPs, assign servers to networks and a lot more.  Manage your infrastructure more efficiently using just a few simple API calls.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/how-to-deploy-bare-metal-cloud-server' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/bmc/v1/)</b> 

    The version of the OpenAPI document: 0.1
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pnap_bmc_api.models.os_configuration_map_esxi import OsConfigurationMapEsxi
from pnap_bmc_api.models.os_configuration_map_proxmox import OsConfigurationMapProxmox
from pnap_bmc_api.models.os_configuration_windows import OsConfigurationWindows
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OsConfigurationMap(BaseModel):
    """
    OS specific configuration properties.
    """ # noqa: E501
    windows: Optional[OsConfigurationWindows] = None
    esxi: Optional[OsConfigurationMapEsxi] = None
    proxmox: Optional[OsConfigurationMapProxmox] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["windows", "esxi", "proxmox"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OsConfigurationMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of windows
        if self.windows:
            _dict['windows'] = self.windows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of esxi
        if self.esxi:
            _dict['esxi'] = self.esxi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxmox
        if self.proxmox:
            _dict['proxmox'] = self.proxmox.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OsConfigurationMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "windows": OsConfigurationWindows.from_dict(obj.get("windows")) if obj.get("windows") is not None else None,
            "esxi": OsConfigurationMapEsxi.from_dict(obj.get("esxi")) if obj.get("esxi") is not None else None,
            "proxmox": OsConfigurationMapProxmox.from_dict(obj.get("proxmox")) if obj.get("proxmox") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


