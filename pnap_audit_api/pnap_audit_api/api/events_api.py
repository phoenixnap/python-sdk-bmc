# coding: utf-8

"""
    Audit Log API

    The Audit Logs API lets you read audit log entries and track API calls or activities in the Bare Metal Cloud Portal.<br> <br> <span class='pnap-api-knowledge-base-link'> Knowledge base articles to help you can be found <a href='https://phoenixnap.com/kb/bmc-server-management-via-api#audit-log-api' target='_blank'>here</a> </span><br> <br> <b>All URLs are relative to (https://api.phoenixnap.com/audit/v1/)</b> 

    The version of the OpenAPI document: 1.0
    Contact: support@phoenixnap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictInt, StrictStr, field_validator

from typing import List, Optional

from pnap_audit_api.models.event import Event

from pnap_audit_api.api_client import ApiClient
from pnap_audit_api.api_response import ApiResponse
from pnap_audit_api.rest import RESTResponseType


class EventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def events_get(
        self,
        var_from: Annotated[Optional[datetime], Field(description="From the date and time (inclusive) to filter event log records by.")] = None,
        to: Annotated[Optional[datetime], Field(description="To the date and time (inclusive) to filter event log records by.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of records returned.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Ordering of the event's time. SortBy can be introduced later on.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="The username that did the actions.")] = None,
        verb: Annotated[Optional[StrictStr], Field(description="The HTTP verb corresponding to the action.")] = None,
        uri: Annotated[Optional[StrictStr], Field(description="The request uri.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Event]:
        """List event logs.

        Retrieves the event logs for given time period. All date & times are in UTC.

        :param var_from: From the date and time (inclusive) to filter event log records by.
        :type var_from: datetime
        :param to: To the date and time (inclusive) to filter event log records by.
        :type to: datetime
        :param limit: Limit the number of records returned.
        :type limit: int
        :param order: Ordering of the event's time. SortBy can be introduced later on.
        :type order: str
        :param username: The username that did the actions.
        :type username: str
        :param verb: The HTTP verb corresponding to the action.
        :type verb: str
        :param uri: The request uri.
        :type uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_get_serialize(
            var_from=var_from,
            to=to,
            limit=limit,
            order=order,
            username=username,
            verb=verb,
            uri=uri,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '206': "List[Event]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def events_get_with_http_info(
        self,
        var_from: Annotated[Optional[datetime], Field(description="From the date and time (inclusive) to filter event log records by.")] = None,
        to: Annotated[Optional[datetime], Field(description="To the date and time (inclusive) to filter event log records by.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of records returned.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Ordering of the event's time. SortBy can be introduced later on.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="The username that did the actions.")] = None,
        verb: Annotated[Optional[StrictStr], Field(description="The HTTP verb corresponding to the action.")] = None,
        uri: Annotated[Optional[StrictStr], Field(description="The request uri.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Event]]:
        """List event logs.

        Retrieves the event logs for given time period. All date & times are in UTC.

        :param var_from: From the date and time (inclusive) to filter event log records by.
        :type var_from: datetime
        :param to: To the date and time (inclusive) to filter event log records by.
        :type to: datetime
        :param limit: Limit the number of records returned.
        :type limit: int
        :param order: Ordering of the event's time. SortBy can be introduced later on.
        :type order: str
        :param username: The username that did the actions.
        :type username: str
        :param verb: The HTTP verb corresponding to the action.
        :type verb: str
        :param uri: The request uri.
        :type uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_get_serialize(
            var_from=var_from,
            to=to,
            limit=limit,
            order=order,
            username=username,
            verb=verb,
            uri=uri,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '206': "List[Event]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def events_get_without_preload_content(
        self,
        var_from: Annotated[Optional[datetime], Field(description="From the date and time (inclusive) to filter event log records by.")] = None,
        to: Annotated[Optional[datetime], Field(description="To the date and time (inclusive) to filter event log records by.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of records returned.")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Ordering of the event's time. SortBy can be introduced later on.")] = None,
        username: Annotated[Optional[StrictStr], Field(description="The username that did the actions.")] = None,
        verb: Annotated[Optional[StrictStr], Field(description="The HTTP verb corresponding to the action.")] = None,
        uri: Annotated[Optional[StrictStr], Field(description="The request uri.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List event logs.

        Retrieves the event logs for given time period. All date & times are in UTC.

        :param var_from: From the date and time (inclusive) to filter event log records by.
        :type var_from: datetime
        :param to: To the date and time (inclusive) to filter event log records by.
        :type to: datetime
        :param limit: Limit the number of records returned.
        :type limit: int
        :param order: Ordering of the event's time. SortBy can be introduced later on.
        :type order: str
        :param username: The username that did the actions.
        :type username: str
        :param verb: The HTTP verb corresponding to the action.
        :type verb: str
        :param uri: The request uri.
        :type uri: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_get_serialize(
            var_from=var_from,
            to=to,
            limit=limit,
            order=order,
            username=username,
            verb=verb,
            uri=uri,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
            '206': "List[Event]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _events_get_serialize(
        self,
        var_from,
        to,
        limit,
        order,
        username,
        verb,
        uri,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if username is not None:
            
            _query_params.append(('username', username))
            
        if verb is not None:
            
            _query_params.append(('verb', verb))
            
        if uri is not None:
            
            _query_params.append(('uri', uri))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


